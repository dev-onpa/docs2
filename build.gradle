buildscript {
    ext {
        springBootVersion = "2.1.5.RELEASE"
        querydslPluginVersion = "1.0.10"
        junitPluginVersion = "1.2.0"
    }
    repositories {
        mavenCentral()
        maven {url "https://plugins.gradle.org/m2/"}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:${junitPluginVersion}")
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.3"
}

subprojects {
    apply plugin: "java"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.junit.platform.gradle.plugin"



    group 'com.onlinepowers'
    version '4.0.0'
    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
    }


    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if( !it.exists() ) {
                it.mkdirs()
            }
        }

        sourceSets*.resources.srcDirs*.each {
            if( !it.exists() ) {
                it.mkdirs()
            }
        }
    }

    dependencies {
        compileOnly('org.projectlombok:lombok')
    }
}

project(':saleson-api') {
    apply plugin: "org.asciidoctor.convert"

    ext {
        snippetsDir = file("build/generated-snippets")
        junitJupiterVersion = "5.3.2"

        set('springCloudVersion', 'Greenwich.RC2')      // spring cloud
    }

    ext["spring-restdocs.version"] = "2.0.3.RELEASE"

    dependencies {
        asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:${project.ext["spring-restdocs.version"]}"

        // 외부 Library
        compile fileTree(dir: '../libs', includes: ['*.jar'])

        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.boot:spring-boot-starter-hateoas")
        compile("org.springframework.boot:spring-boot-starter-quartz")
        compile("org.springframework.boot:spring-boot-starter-web")
        // compile("org.springframework.cloud:spring-cloud-starter-security")
        compile("org.springframework.cloud:spring-cloud-starter-oauth2")

        runtimeOnly("org.springframework.boot:spring-boot-devtools")
        runtimeOnly("com.h2database:h2")
        runtimeOnly("mysql:mysql-connector-java")

        compile("org.projectlombok:lombok")
        compile("com.querydsl:querydsl-apt")
        compile("com.querydsl:querydsl-jpa")
        //compile("com.querydsl:querydsl-mongodb")

        testCompile("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "junit", module: "junit;"
        }
        testCompile("org.springframework.security:spring-security-test")
        testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")

        // Junit5
        testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    /**
     * querydsl 적용
     */
    apply plugin: "com.ewerk.gradle.plugins.querydsl"
    def querydslSrcDir = "src/main/generated"


    querydsl {
        library = "com.querydsl:querydsl-apt"
        jpa = true
        //springDataMongo = true
        querydslSourcesDir = querydslSrcDir
    }

    sourceSets {
        main {
            java {
                srcDirs = ["src/main/java", querydslSrcDir]
            }
        }
    }


    /**
     * REST-Docs
     */
    test {
        outputs.dir snippetsDir
    }

    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
    }

    bootJar {
        dependsOn asciidoctor
        from ("${asciidoctor.outputDir}/html5") {
            into "static/docs"
        }
    }

    /*eclipseJdt.onlyIf { false }
    cleanEclipseJdt.onlyIf { false }*/
}
